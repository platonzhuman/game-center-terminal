"""
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–º–µ–π–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π
"""

import curses
import random
import time
import collections

class SnakeGame:
    def __init__(self, stdscr, game_manager):
        self.stdscr = stdscr
        self.manager = game_manager
        self.score = 0
        self.high_score = self.manager.get_high_score('snake')
        self.snake = None
        self.food = None
        self.direction = curses.KEY_RIGHT
        self.next_direction = curses.KEY_RIGHT
        self.game_speed = 150  # ms
        self.running = False
        
        # –†–∞–∑–º–µ—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–º–µ–Ω—å—à–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        self.game_height = 20
        self.game_width = 40
    
    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–º–µ–π–∫–∏"""
        self.initialize_game()
        self.running = True
        
        while self.running:
            start_time = time.time()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            self.handle_input()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
            self.update()
            
            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
            self.draw()
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å FPS
            elapsed = time.time() - start_time
            sleep_time = max(0.001, self.game_speed / 1000.0 - elapsed)
            time.sleep(sleep_time)
    
    def initialize_game(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–º–µ–π–∫–∏
        self.snake = collections.deque()
        start_y = self.game_height // 2
        start_x = self.game_width // 2
        for i in range(3):
            self.snake.append((start_y, start_x - i))
        
        self.direction = curses.KEY_RIGHT
        self.next_direction = curses.KEY_RIGHT
        self.score = 0
        self.game_speed = 150
        self.generate_food()
    
    def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        self.stdscr.nodelay(1)
        key = self.stdscr.getch()
        
        if key != -1:
            if key == curses.KEY_UP and self.direction != curses.KEY_DOWN:
                self.next_direction = curses.KEY_UP
            elif key == curses.KEY_DOWN and self.direction != curses.KEY_UP:
                self.next_direction = curses.KEY_DOWN
            elif key == curses.KEY_LEFT and self.direction != curses.KEY_RIGHT:
                self.next_direction = curses.KEY_LEFT
            elif key == curses.KEY_RIGHT and self.direction != curses.KEY_LEFT:
                self.next_direction = curses.KEY_RIGHT
            elif key == 27:  # ESC
                self.running = False
            elif key == ord('p') or key == ord('P'):  # Pause
                self.show_pause_screen()
    
    def update(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.direction = self.next_direction
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–æ–ª–æ–≤—É
        head_y, head_x = self.snake[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≥–æ–ª–æ–≤—ã
        if self.direction == curses.KEY_UP:
            new_head = (head_y - 1, head_x)
        elif self.direction == curses.KEY_DOWN:
            new_head = (head_y + 1, head_x)
        elif self.direction == curses.KEY_LEFT:
            new_head = (head_y, head_x - 1)
        elif self.direction == curses.KEY_RIGHT:
            new_head = (head_y, head_x + 1)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
        if (new_head[0] <= 0 or new_head[0] >= self.game_height + 1 or 
            new_head[1] <= 0 or new_head[1] >= self.game_width + 1):
            self.game_over()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
        if new_head in self.snake:
            self.game_over()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É
        self.snake.appendleft(new_head)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ä–µ–¥–∞–Ω–∏—è –µ–¥—ã
        if new_head == self.food:
            self.score += 10
            self.generate_food()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 50 –æ—á–∫–æ–≤
            if self.score % 50 == 0 and self.game_speed > 50:
                self.game_speed -= 10
        else:
            # –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ —Å—ä–µ–ª–∏ –µ–¥—É
            self.snake.pop()
    
    def generate_food(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –µ–¥—ã"""
        while True:
            y = random.randint(1, self.game_height)
            x = random.randint(1, self.game_width)
            if (y, x) not in self.snake:
                self.food = (y, x)
                break
    
    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã"""
        self.stdscr.clear()
        height, width = self.stdscr.getmaxyx()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        if height < 25 or width < 50:
            self.show_small_screen_error()
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üêç –ó–ú–ï–ô–ö–ê CLASSIC"
        self.stdscr.addstr(1, (width - len(title)) // 2, title, curses.color_pair(3) | curses.A_BOLD)
        
        # –°—á–µ—Ç
        score_text = f"–°—á–µ—Ç: {self.score} | –†–µ–∫–æ—Ä–¥: {self.high_score} | –°–∫–æ—Ä–æ—Å—Ç—å: {200 - self.game_speed}"
        self.stdscr.addstr(2, (width - len(score_text)) // 2, score_text, curses.color_pair(1))
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        self.draw_borders()
        
        # –†–∏—Å—É–µ–º –∑–º–µ–π–∫—É
        for i, (y, x) in enumerate(self.snake):
            # –°–º–µ—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è
            draw_y = y + 4
            draw_x = x + (width - self.game_width) // 2
            
            if i == 0:  # –ì–æ–ª–æ–≤–∞
                self.stdscr.addstr(draw_y, draw_x, "‚óè", curses.color_pair(2))
            else:  # –¢–µ–ª–æ
                self.stdscr.addstr(draw_y, draw_x, "‚óã", curses.color_pair(3))
        
        # –†–∏—Å—É–µ–º –µ–¥—É
        food_y = self.food[0] + 4
        food_x = self.food[1] + (width - self.game_width) // 2
        self.stdscr.addstr(food_y, food_x, "‚óè", curses.color_pair(4))
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        controls = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –°—Ç—Ä–µ–ª–∫–∏ - –¥–≤–∏–∂–µ–Ω–∏–µ, P - –ø–∞—É–∑–∞, ESC - –≤—ã—Ö–æ–¥"
        if height > 25:
            self.stdscr.addstr(25, (width - len(controls)) // 2, controls, curses.color_pair(5))
        
        self.stdscr.refresh()
    
    def draw_borders(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        height, width = self.stdscr.getmaxyx()
        start_x = (width - self.game_width) // 2
        
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        top_y = 4
        for x in range(start_x, start_x + self.game_width + 2):
            if top_y < height and x < width:
                if x == start_x:
                    self.stdscr.addstr(top_y, x, "‚îå", curses.color_pair(1))
                elif x == start_x + self.game_width + 1:
                    self.stdscr.addstr(top_y, x, "‚îê", curses.color_pair(1))
                else:
                    self.stdscr.addstr(top_y, x, "‚îÄ", curses.color_pair(1))
        
        # –ë–æ–∫–æ–≤—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        bottom_y = 4 + self.game_height + 1
        for y in range(5, 5 + self.game_height + 1):
            if y < height:
                # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                if start_x < width:
                    self.stdscr.addstr(y, start_x, "‚îÇ", curses.color_pair(1))
                # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                right_x = start_x + self.game_width + 1
                if right_x < width:
                    self.stdscr.addstr(y, right_x, "‚îÇ", curses.color_pair(1))
        
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        if bottom_y < height:
            for x in range(start_x, start_x + self.game_width + 2):
                if x < width:
                    if x == start_x:
                        self.stdscr.addstr(bottom_y, x, "‚îî", curses.color_pair(1))
                    elif x == start_x + self.game_width + 1:
                        self.stdscr.addstr(bottom_y, x, "‚îò", curses.color_pair(1))
                    else:
                        self.stdscr.addstr(bottom_y, x, "‚îÄ", curses.color_pair(1))
    
    def show_small_screen_error(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        height, width = self.stdscr.getmaxyx()
        message = "–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª!"
        advice = "–£–≤–µ–ª–∏—á—å—Ç–µ –æ–∫–Ω–æ –¥–æ 50x25 —Å–∏–º–≤–æ–ª–æ–≤"
        self.stdscr.addstr(height//2 - 1, (width - len(message)) // 2, message, curses.color_pair(4))
        self.stdscr.addstr(height//2 + 1, (width - len(advice)) // 2, advice, curses.color_pair(1))
        self.stdscr.addstr(height//2 + 3, (width - 20) // 2, "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É", curses.color_pair(2))
        self.stdscr.refresh()
        self.stdscr.getch()
        self.running = False
    
    def show_pause_screen(self):
        """–≠–∫—Ä–∞–Ω –ø–∞—É–∑—ã"""
        height, width = self.stdscr.getmaxyx()
        
        pause_msg = "‚è∏Ô∏è –ü–ê–£–ó–ê"
        continue_msg = "–ù–∞–∂–º–∏—Ç–µ P –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        
        self.stdscr.addstr(height//2 - 1, (width - len(pause_msg)) // 2, pause_msg, curses.color_pair(2) | curses.A_BOLD)
        self.stdscr.addstr(height//2 + 1, (width - len(continue_msg)) // 2, continue_msg, curses.color_pair(1))
        self.stdscr.refresh()
        
        while True:
            key = self.stdscr.getch()
            if key == ord('p') or key == ord('P'):
                break
            elif key == 27:  # ESC
                self.running = False
                break
    
    def game_over(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥
        if self.score > self.high_score:
            self.manager.save_high_score('snake', self.score)
            new_record = True
        else:
            new_record = False
        
        height, width = self.stdscr.getmaxyx()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∏–≥—Ä—ã—à–∞
        for i in range(3):
            self.stdscr.clear()
            if i % 2 == 0:
                self.draw()
            
            message = "üíÄ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!"
            if new_record:
                record_msg = "üéâ –ù–û–í–´–ô –†–ï–ö–û–†–î!"
                self.stdscr.addstr(height//2 - 2, (width - len(record_msg)) // 2, record_msg, curses.color_pair(3) | curses.A_BOLD)
            
            self.stdscr.addstr(height//2, (width - len(message)) // 2, message, curses.color_pair(4) | curses.A_BOLD)
            
            score_text = f"–í–∞—à —Å—á–µ—Ç: {self.score}"
            self.stdscr.addstr(height//2 + 1, (width - len(score_text)) // 2, score_text, curses.color_pair(1))
            
            high_score_text = f"–†–µ–∫–æ—Ä–¥: {max(self.score, self.high_score)}"
            self.stdscr.addstr(height//2 + 2, (width - len(high_score_text)) // 2, high_score_text, curses.color_pair(2))
            
            continue_text = "–ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã"
            self.stdscr.addstr(height//2 + 4, (width - len(continue_text)) // 2, continue_text, curses.color_pair(5))
            
            exit_text = "–∏–ª–∏ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é"
            self.stdscr.addstr(height//2 + 5, (width - len(exit_text)) // 2, exit_text, curses.color_pair(5))
            
            self.stdscr.refresh()
            time.sleep(0.5)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
        while True:
            key = self.stdscr.getch()
            if key == ord(' '):
                self.initialize_game()
                break
            elif key == 27:  # ESC
                self.running = False
                break
